// Place your key bindings in this file to override the defaults
[
    {
        "key": "shift+alt+r",
        "command": "revealFileInOS",
        "when": "remoteName != 'wsl'"
    },
    {
        "key": "ctrl+shift+j",
        "command": "editor.action.joinLines",
        "when": "!inSearchEditor && !searchViewletFocus"
    },
    {
        "key": "ctrl+k ctrl+alt+s",
        "command": "git.stageSelectedRanges"
    },
    {
        "key": "ctrl+k ctrl+u",
        "command": "git.unstageSelectedRanges"
    },
    {
        "key": "ctrl+tab",
        "command": "workbench.action.nextEditor"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "workbench.action.previousEditor"
    },
    {
        "key": "ctrl+\\",
        "command": "workbench.action.debug.continue",
        "when": "inDebugMode"
    },
    {
        "key": "ctrl+\\",
        "command": "workbench.action.debug.pause",
        "when": "debugState == 'running'"
    },
    {
        "key": "ctrl+'",
        "command": "extension.node-debug.startWithStopOnEntry",
        "when": "!inDebugMode && debugConfigurationType == 'node'"
    },
    {
        "key": "ctrl+'",
        "command": "workbench.action.debug.stepOver",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "ctrl+;",
        "command": "workbench.action.debug.stepInto",
        "when": "debugState != 'inactive'"
    },
    {
        "key": "ctrl+shift+;",
        "command": "workbench.action.debug.stepOut",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "ctrl+shift+e",
        "command": "editor.debug.action.selectionToRepl",
        "when": "inDebugMode && editorHasSelection"
    },
    {
        "key": "ctrl+k l",
        "command": "workbench.action.navigateLast"
    },
    {
        "key": "ctrl+k ctrl+shift+o",
        "command": "workbench.action.closeOtherEditors"
    },
    {
        "key": "ctrl+k ctrl+shift+r",
        "command": "workbench.action.closeEditorsToTheRight"
    },
    {
        "key": "ctrl+k ctrl+enter",
        "command": "workbench.action.keepEditor"
    },
    {
        "key": "alt+1",
        "command": "-workbench.action.openEditorAtIndex1"
    },
    {
        "key": "alt+2",
        "command": "-workbench.action.openEditorAtIndex2"
    },
    {
        "key": "alt+3",
        "command": "-workbench.action.openEditorAtIndex3"
    },
    {
        "key": "alt+4",
        "command": "-workbench.action.openEditorAtIndex4"
    },
    {
        "key": "alt+5",
        "command": "-workbench.action.openEditorAtIndex5"
    },
    {
        "key": "alt+6",
        "command": "-workbench.action.openEditorAtIndex6"
    },
    {
        "key": "alt+7",
        "command": "-workbench.action.openEditorAtIndex7"
    },
    {
        "key": "alt+8",
        "command": "-workbench.action.openEditorAtIndex8"
    },
    {
        "key": "alt+9",
        "command": "-workbench.action.openEditorAtIndex9"
    },
    {
        "key": "ctrl+1",
        "command": "workbench.action.openEditorAtIndex1"
    },
    {
        "key": "ctrl+2",
        "command": "workbench.action.openEditorAtIndex2"
    },
    {
        "key": "ctrl+3",
        "command": "workbench.action.openEditorAtIndex3"
    },
    {
        "key": "ctrl+4",
        "command": "workbench.action.openEditorAtIndex4"
    },
    {
        "key": "ctrl+5",
        "command": "workbench.action.openEditorAtIndex5"
    },
    {
        "key": "ctrl+6",
        "command": "workbench.action.openEditorAtIndex6"
    },
    {
        "key": "ctrl+7",
        "command": "workbench.action.openEditorAtIndex7"
    },
    {
        "key": "ctrl+8",
        "command": "workbench.action.openEditorAtIndex8"
    },
    {
        "key": "ctrl+9",
        "command": "workbench.action.openEditorAtIndex9"
    },
    {
        "key": "ctrl+shift+r",
        "command": "workbench.view.remote",
        "when": "!inSearchEditor && !(editorHasCodeActionsProvider && editorTextFocus && !editorReadonly)"
    },
    {
        "key": "j",
        "command": "vscode-neovim.compositeEscape1",
        "when": "neovim.mode == insert",
        "args": "j"
    },
    {
        "key": "k",
        "command": "vscode-neovim.compositeEscape2",
        "when": "neovim.mode == insert",
        "args": "k"
    },
    {
        "key": "ctrl+b",
        "command": "-vscode-neovim.ctrl-b",
        "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+c",
        "command": "-vscode-neovim.escape",
        "when": "editorTextFocus && neovim.init"
    },
    {
        "key": "ctrl+f",
        "command": "-vscode-neovim.ctrl-f",
        "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+k",
        "command": "-vscode-neovim.send",
        "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+w",
        "command": "-vscode-neovim.send",
        "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+shift+d",
        "command": "-cgroovy.organizeDependences"
    },
    {
        "key": "ctrl+alt+`",
        "command": "workbench.action.terminal.moveToEditor",
        "when": "focusedView == 'terminal'"
    },
    {
        "key": "ctrl+alt+`",
        "command": "workbench.action.terminal.moveToTerminalPanel",
        "when": "activeEditor == 'terminalEditor'"
    },
    {
        "key": "ctrl+r shift+x",
        "command": "-npm-script.terminate-script",
        "when": "!terminalFocus"
    },
    {
        "key": "ctrl+r l",
        "command": "-npm-script.showOutput",
        "when": "!terminalFocus"
    },
    {
        "key": "ctrl+r t",
        "command": "-npm-script.test",
        "when": "!terminalFocus"
    },
    {
        "key": "ctrl+r shift+r",
        "command": "-npm-script.run",
        "when": "!terminalFocus"
    },
    {
        "key": "ctrl+r r",
        "command": "-npm-script.rerun-last-script",
        "when": "!terminalFocus"
    }
]